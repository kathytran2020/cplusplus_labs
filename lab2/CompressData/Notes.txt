
Notes:

<<New Queue>>
class Priority_Queue
{
	vector<Node*> vdata;
public:
	Priority_Queue() { }
	Node* top()
	{
		if (vdata.size() > 0)
			return vdata[0];
		return *vdata.end();
	}
	int size() { return vdata.size(); }
	bool empty() { return vdata.size() < 1; }
	void push(Node* n)
	{
		vdata.push_back(n);
		sort(vdata.begin(), vdata.end(),
			[](Node* a, Node* b)
			{
				return a->key() < b->key();
			});
	}
	void pop()
	{
		vdata.erase(vdata.begin());
	}
	void print()
	{
		for_each(vdata.begin(), vdata.end(),
			[](Node* n)
			{
				cout << n->key() << '\t' << n->value() << endl;
			});
	}
};

Using the Mississippi^River character frequencies
    << Priority_Queue pq; >>
    pq.push(new node(1,'^'));
    pq.push(new node(1,'e'));
    pq.push(new node(5,'i'));
    pq.push(new node(1,'m'));
    pq.push(new node(2,'p'));
    pq.push(new node(2,'r'));
    pq.push(new node(4,'s'));
    pq.push(new node(1,'v'));

<<PriorityQueue>> size = 8
	1       ^
	1       E
	1       M
	1       V
	2       P
	2       R
	4       S
	5       I

<<Bit-Trail Map>>
	 tree top: 17    SPR^EMVI
	 Leaf: <S>      00
	 Leaf: <P>      010
	 Leaf: <R>      011
	 Leaf: <^>      1000
	 Leaf: <E>      1001
	 Leaf: <M>      1010
	 Leaf: <V>      1011
	 Leaf: <I>      11